CREATE TABLE users (
    userId BINARY(16) PRIMARY KEY,
    firstName VARCHAR(50) NOT NULL,
    lastName VARCHAR(50),
    phoneNo VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(256) NOT NULL,
    profilePicture VARCHAR(255)
);

CREATE TABLE useraddresses (
    addressId BINARY(16) PRIMARY KEY,
    userId BINARY(16) NOT NULL,
    street VARCHAR(100),
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50),
    pinCode VARCHAR(10),
    country VARCHAR(50) NOT NULL,
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE
);




CREATE TABLE vehicles (
    vehicleId BINARY(16) PRIMARY KEY,
    vehicleType ENUM('train', 'flight', 'bus', 'cab', 'cruise') NOT NULL,
    status ENUM('active', 'maintenance', 'cancelled') DEFAULT 'active',
    availableSeats INT NOT NULL
);

CREATE TABLE trains (
    vehicleId BINARY(16) KEY,
    trainName VARCHAR(100) NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE flights (
    vehicleId BINARY(16) PRIMARY KEY,
    flightName VARCHAR(100) NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE buses (
    vehicleId BINARY(16) PRIMARY KEY,
    busName VARCHAR(100) NOT NULL,
    photo VARCHAR(255),
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE cabs (
    vehicleId BINARY(16) PRIMARY KEY,
    carModel VARCHAR(100) NOT NULL,
    photo VARCHAR(255),
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE cruises (
    vehicleId BINARY(16) PRIMARY KEY,
    cruiseName VARCHAR(100) NOT NULL,
    photo VARCHAR(255),
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE vehicledrivers (
    driverId BINARY(16) PRIMARY KEY,
    vehicleId BINARY(16) NOT NULL,
    driverName VARCHAR(100) NOT NULL,
    driverPhoneNo VARCHAR(15) NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE vehiclecoaches (
    coachId VARCHAR(5) PRIMARY KEY,
    vehicleId BINARY(16) NOT NULL,
    coachType VARCHAR(50) NOT NULL,
    seatsAvailable INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE,
    UNIQUE KEY unique_vehicle_coach (vehicleId, coachType)
);

CREATE TABLE stations (
    stationId BINARY(16) PRIMARY KEY,
    stationName VARCHAR(100) NOT NULL,
    stationType ENUM('railway', 'airport', 'bus', 'seaport') NOT NULL,
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50),
    country VARCHAR(50) NOT NULL,
    latitude DECIMAL(10,8),
    longitude DECIMAL(11,8),
    UNIQUE KEY unique_station_name_type (stationName, stationType, city)
);

CREATE TABLE vehiclestations (
    vehicleStationId BINARY(16) PRIMARY KEY,
    vehicleId BINARY(16) NOT NULL,
    stationId BINARY(16) NOT NULL,
    arrivalTime DATETIME,
    departureTime DATETIME,
    stoppage INT,
    stationOrder INT NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE,
    FOREIGN KEY (stationId) REFERENCES stations(stationId) ON DELETE CASCADE,
    UNIQUE KEY unique_vehicle_station (vehicleId, stationId),
    UNIQUE KEY unique_vehicle_station_order (vehicleId, stationOrder)
);

CREATE TABLE seats (
    seatId BINARY(16) PRIMARY KEY,
    vehicleId BINARY(16) NOT NULL,
    coachId VARCHAR(5) NOT NULL,
    seatNumber VARCHAR(5) NOT NULL,
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE,
    FOREIGN KEY (coachId) REFERENCES vehiclecoaches(coachId) ON DELETE CASCADE,
    UNIQUE KEY unique_seat (vehicleId, coachId, seatNumber)
);







CREATE TABLE accommodations (
    accomId BINARY(16) PRIMARY KEY,
    accomType ENUM('hotel', 'airbnb') NOT NULL,
    name VARCHAR(100) NOT NULL,
    phoneNo VARCHAR(15) NOT NULL,
    email VARCHAR(100),
    description TEXT
);

CREATE TABLE accommodationaddresses (
    addressId BINARY(16) PRIMARY KEY,
    accomId BINARY(16) NOT NULL,
    street VARCHAR(100) NOT NULL,
    landmark VARCHAR(100),
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50),
    pinCode VARCHAR(10),
    country VARCHAR(50) NOT NULL,
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);

CREATE TABLE accommodationphotos (
    photoId BINARY(16) PRIMARY KEY,
    accomId BINARY(16) NOT NULL,
    photoUrl VARCHAR(255) NOT NULL,
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);

CREATE TABLE accommodationamenities (
    amenityId BINARY(16) PRIMARY KEY,
    amenityType VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE accomamenitymap (
    accomId BINARY(16) NOT NULL,
    amenityId BINARY(16) NOT NULL,
    PRIMARY KEY (accomId, amenityId),
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE,
    FOREIGN KEY (amenityId) REFERENCES accommodationamenities(amenityId) ON DELETE CASCADE
);

CREATE TABLE hotels (
    accomId BINARY(16) PRIMARY KEY,
    breakfastIncluded BOOLEAN DEFAULT FALSE,
    acType ENUM('AC', 'NON-AC', 'BOTH') NOT NULL,
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);

CREATE TABLE airbnbs (
    accomId BINARY(16) PRIMARY KEY,
    maxAllowedGuests INT NOT NULL,
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);

CREATE TABLE rooms (
    roomId BINARY(16) PRIMARY KEY,
    accomId BINARY(16) NOT NULL,
    roomType VARCHAR(50) NOT NULL,
    roomsAvailable INT NOT NULL,
    pplAccommodated INT NOT NULL,
    roomDescription TEXT,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);







CREATE TABLE trips (
    tripId BINARY(16) PRIMARY KEY,
    userId BINARY(16) NOT NULL,
    name VARCHAR(100) NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL,
    status ENUM('planning', 'booked', 'ongoing', 'completed', 'cancelled') DEFAULT 'planning',
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE
);

CREATE TABLE vehiclebookingitems (
    vehicleItemId BINARY(16) PRIMARY KEY,
    vehicleId BINARY(16) NOT NULL,
    onboardingLocation VARCHAR(100) NOT NULL,
    deboardingLocation VARCHAR(100) NOT NULL,
    onboardingTime DATETIME NOT NULL,
    deboardingTime DATETIME NOT NULL,
    coachType VARCHAR(50),
    price DECIMAL(10,2) NOT NULL,
    status ENUM('confirmed', 'pending', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (vehicleId) REFERENCES vehicles(vehicleId) ON DELETE CASCADE
);

CREATE TABLE accommodationbookingitems (
    accomItemId BINARY(16) PRIMARY KEY,
    accomId BINARY(16) NOT NULL,
    checkInDate DATE NOT NULL,
    checkOutDate DATE NOT NULL,
    contactName VARCHAR(100) NOT NULL,
    contactPhoneNo VARCHAR(15) NOT NULL,
    contactEmail VARCHAR(100),
    price DECIMAL(10,2) NOT NULL,
    status ENUM('confirmed', 'pending', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (accomId) REFERENCES accommodations(accomId) ON DELETE CASCADE
);

CREATE TABLE accombookingrooms (
    bookingRoomId BINARY(16) PRIMARY KEY,
    accomItemId BINARY(16) NOT NULL,
    roomId BINARY(16) NOT NULL,
    roomNumber VARCHAR(20),
    FOREIGN KEY (accomItemId) REFERENCES accommodationbookingitems(accomItemId) ON DELETE CASCADE,
    FOREIGN KEY (roomId) REFERENCES rooms(roomId) ON DELETE CASCADE
);

CREATE TABLE passengerseats (
    passengerId BINARY(16) PRIMARY KEY,
    vehicleItemId BINARY(16) NOT NULL,
    seatId BINARY(16) NOT NULL,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    gender ENUM('male', 'female', 'other') NOT NULL,
    foodPreference ENUM('veg', 'non-veg', 'vegan', 'none') DEFAULT 'none',
    FOREIGN KEY (vehicleItemId) REFERENCES vehiclebookingitems(vehicleItemId) ON DELETE CASCADE,
    FOREIGN KEY (seatId) REFERENCES seats(seatId) ON DELETE CASCADE,
    UNIQUE KEY unique_vehicle_seat (vehicleItemId, seatId)
);

CREATE TABLE bookings (
    bookingId BINARY(16) PRIMARY KEY,
    userId BINARY(16) NOT NULL,
    tripId BINARY(16),
    totalPrice DECIMAL(10,2) NOT NULL,
    status ENUM('confirmed', 'pending', 'cancelled') DEFAULT 'pending',
    createDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE,
    FOREIGN KEY (tripId) REFERENCES trips(tripId) ON DELETE SET NULL
);

CREATE TABLE bookingitems (
    bookingItemId BINARY(16) PRIMARY KEY,
    bookingId BINARY(16) NOT NULL,
    itemType ENUM('vehicle', 'accommodation') NOT NULL,
    vehicleItemId BINARY(16),
    accomItemId BINARY(16),
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (bookingId) REFERENCES bookings(bookingId) ON DELETE CASCADE,
    FOREIGN KEY (vehicleItemId) REFERENCES vehiclebookingitems(vehicleItemId) ON DELETE SET NULL,
    FOREIGN KEY (accomItemId) REFERENCES accommodationbookingitems(accomItemId) ON DELETE SET NULL
);

DELIMITER //

CREATE TRIGGER before_insert_bookingItems
BEFORE INSERT ON bookingitems
FOR EACH ROW
BEGIN
    -- Ensure only one of vehicleItemId or accomItemId is set based on itemType
    IF (NEW.itemType = 'vehicle' AND (NEW.vehicleItemId IS NULL OR NEW.accomItemId IS NOT NULL)) OR
       (NEW.itemType = 'accommodation' AND (NEW.accomItemId IS NULL OR NEW.vehicleItemId IS NOT NULL)) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid itemType: vehicleItemId and accomItemId must match itemType';
    END IF;
END //

CREATE TRIGGER before_update_bookingItems
BEFORE UPDATE ON bookingitems
FOR EACH ROW
BEGIN
    -- Ensure only one of vehicleItemId or accomItemId is set based on itemType
    IF (NEW.itemType = 'vehicle' AND (NEW.vehicleItemId IS NULL OR NEW.accomItemId IS NOT NULL)) OR
       (NEW.itemType = 'accommodation' AND (NEW.accomItemId IS NULL OR NEW.vehicleItemId IS NOT NULL)) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid itemType: vehicleItemId and accomItemId must match itemType';
    END IF;
END //
DELIMITER ;

CREATE TABLE payments (
    paymentId BINARY(16) PRIMARY KEY,
    bookingId BINARY(16) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    paid BOOLEAN DEFAULT FALSE,
    paymentMethod VARCHAR(50),
    transactionId VARCHAR(100),
    paymentDate TIMESTAMP,
    status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',
    FOREIGN KEY (bookingId) REFERENCES bookings(bookingId) ON DELETE CASCADE
);


CREATE TABLE reviews (
    reviewId BINARY(16) PRIMARY KEY,
    userId BINARY(16) NOT NULL,
    itemType ENUM('vehicle', 'accommodation', 'trip') NOT NULL,
    itemId BINARY(16) NOT NULL,
    rating DECIMAL(3,2) NOT NULL CHECK (rating BETWEEN 0 AND 5),
    comment TEXT,
    reviewDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users(userId) ON DELETE CASCADE,
    UNIQUE KEY unique_user_review (userId, itemType, itemId)
);
